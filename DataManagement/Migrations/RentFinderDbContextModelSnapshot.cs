// <auto-generated />
using System;
using DataManagement.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataManagement.Migrations
{
    [DbContext(typeof(RentFinderDbContext))]
    partial class RentFinderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataManagement.Models.BotAdminDto", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    b.Property<long?>("BotTelegramId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("BotAdminDto_pkey");

                    b.HasIndex("BotTelegramId");

                    b.ToTable("BotAdminDto", (string)null);
                });

            modelBuilder.Entity("DataManagement.Models.BotTelegramDto", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("BotTelegramDto_pkey");

                    b.ToTable("BotTelegramDto", (string)null);
                });

            modelBuilder.Entity("DataManagement.Models.ChannelInfoDto", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("BotTelegramId")
                        .HasColumnType("bigint");

                    b.Property<string>("ChannelName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastCheckDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("ChannelInfoDto_pkey");

                    b.HasIndex("BotTelegramId");

                    b.ToTable("ChannelInfoDto", (string)null);
                });

            modelBuilder.Entity("DataManagement.Models.FlatCoordinateDto", b =>
                {
                    b.Property<long>("FlatInfoId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("FlatInfoId")
                        .HasName("FlatCoordinateDto_pkey");

                    b.ToTable("FlatCoordinateDto", (string)null);
                });

            modelBuilder.Entity("DataManagement.Models.FlatDateInfoDto", b =>
                {
                    b.Property<long>("FlatInfoId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RefusePublication")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("SitePublication")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TelegramPublication")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FlatInfoId")
                        .HasName("FlatDateInfoDto_pkey");

                    b.ToTable("FlatDateInfoDto", (string)null);
                });

            modelBuilder.Entity("DataManagement.Models.FlatInfoDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("json");

                    b.Property<long>("Cost")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("FlatPhoneId")
                        .HasColumnType("bigint");

                    b.Property<string>("PageLink")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ViewsOnSite")
                        .HasColumnType("bigint")
                        .HasColumnName("ViewsOnSIte");

                    b.HasKey("Id")
                        .HasName("FlatInfoDto_pkey");

                    b.HasIndex("FlatPhoneId");

                    b.ToTable("FlatInfoDto", (string)null);
                });

            modelBuilder.Entity("DataManagement.Models.FlatLinkImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<long?>("FlatInfoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("FlatLinkImage_pkey");

                    b.HasIndex("FlatInfoId");

                    b.ToTable("FlatLinkImage", (string)null);
                });

            modelBuilder.Entity("DataManagement.Models.FlatPhoneDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("NumberMentionsOnSite")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("FlatPhoneDto_pkey");

                    b.HasIndex(new[] { "Number" }, "flatphonedto_number_unique")
                        .IsUnique();

                    b.ToTable("FlatPhoneDto", (string)null);
                });

            modelBuilder.Entity("DataManagement.Models.BotAdminDto", b =>
                {
                    b.HasOne("DataManagement.Models.BotTelegramDto", "BotTelegram")
                        .WithMany("BotAdminsDto")
                        .HasForeignKey("BotTelegramId")
                        .HasConstraintName("botadmindto_bottelegramid_foreign");

                    b.Navigation("BotTelegram");
                });

            modelBuilder.Entity("DataManagement.Models.ChannelInfoDto", b =>
                {
                    b.HasOne("DataManagement.Models.BotTelegramDto", "BotTelegram")
                        .WithMany("ChannelInfosDto")
                        .HasForeignKey("BotTelegramId")
                        .HasConstraintName("channelinfodto_bottelegramid_foreign");

                    b.Navigation("BotTelegram");
                });

            modelBuilder.Entity("DataManagement.Models.FlatInfoDto", b =>
                {
                    b.HasOne("DataManagement.Models.FlatPhoneDto", "FlatPhone")
                        .WithMany("FlatsInfoDto")
                        .HasForeignKey("FlatPhoneId")
                        .IsRequired()
                        .HasConstraintName("flatinfodto_flatphoneid_foreign");

                    b.HasOne("DataManagement.Models.FlatDateInfoDto", "IdNavigation")
                        .WithOne("FlatInfoDto")
                        .HasForeignKey("DataManagement.Models.FlatInfoDto", "Id")
                        .IsRequired()
                        .HasConstraintName("flatinfodto_id_foreign");

                    b.Navigation("FlatPhone");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("DataManagement.Models.FlatLinkImage", b =>
                {
                    b.HasOne("DataManagement.Models.FlatInfoDto", "FlatInfo")
                        .WithMany("FlatLinkImages")
                        .HasForeignKey("FlatInfoId")
                        .HasConstraintName("flatlinkimage_flatinfoid_foreign");

                    b.Navigation("FlatInfo");
                });

            modelBuilder.Entity("DataManagement.Models.BotTelegramDto", b =>
                {
                    b.Navigation("BotAdminsDto");

                    b.Navigation("ChannelInfosDto");
                });

            modelBuilder.Entity("DataManagement.Models.FlatDateInfoDto", b =>
                {
                    b.Navigation("FlatInfoDto");
                });

            modelBuilder.Entity("DataManagement.Models.FlatInfoDto", b =>
                {
                    b.Navigation("FlatLinkImages");
                });

            modelBuilder.Entity("DataManagement.Models.FlatPhoneDto", b =>
                {
                    b.Navigation("FlatsInfoDto");
                });
#pragma warning restore 612, 618
        }
    }
}
